apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:5.7
          command:
            - bash
            - '-c'
            - |
              set -ex
              # pod의 index 순서에서 mysql server-id를 생성합니다.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # 예약된 server-id=0 값을 피하려면 offset을 추가합니다.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # 적절한 conf.d 파일을 config-map에서 emptyDir로 복사합니다.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
        - name: clone-mysql
          image: gcr.io/google-samples/xtrabackup:1.0
          command:
            - bash
            - '-c'
            - |
              set -ex
              # 데이터가 이미 존재하는 경우는 clone를 건너뜁니다.
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # master(index 0)의 clone를 건너뜁니다.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # 이전 peer의 data를 clone 합니다.
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # 백업 준비
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            - name: pvc-test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: '1'
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: pvc-test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command: ['mysqladmin', 'ping']
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # TCP를 통해 쿼리를 실행할 수 있는지 확인합니다. (skip-networking is off)
              command: ['mysql', '-h', '127.0.0.1', '-e', 'SELECT 1']
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
        - name: xtrabackup
          image: gcr.io/google-samples/xtrabackup:1.0
          ports:
            - name: xtrabackup
              containerPort: 3307
          command:
            - bash
            - '-c'
            - |
              set -ex
              cd /var/lib/mysql

              # clone 된 데이터의 binlog 위치를 확인합니다.
              if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
                # XtraBackup이 이미 부분 "CHANGE MASTER TO" query를 생성했습니다. 
                # 기존 slave에서 clone 하고 있기 때문입니다. (끝에 세미콜론을 제거해야 합니다!)
                cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
                # 이 경우 xtrabackup_binlog_info을 무시합니다. (쓸모 없음)
                rm -f xtrabackup_slave_info xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # master에서 직접 clone 합니다. binlog 위치를 구문 분석합니다.
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                rm -f xtrabackup_binlog_info xtrabackup_slave_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi

              # replication를 시작하여 clone를 완성시킬 필요가 있는지 여부를 확인합니다.
              if [[ -f change_master_to.sql.in ]]; then
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

                echo "Initializing replication from clone position"
                mysql -h 127.0.0.1 \
                      -e "$(<change_master_to.sql.in), \
                              MASTER_HOST='mysql-0.mysql', \
                              MASTER_USER='root', \
                              MASTER_PASSWORD='', \
                              MASTER_CONNECT_RETRY=10; \
                            START SLAVE;" || exit 1
                # 컨테이너를 다시 시작하는 경우 이를 최대 1회 시도하십시오.
                mv change_master_to.sql.in change_master_to.sql.orig
              fi

              # peer에서 요청할 때 백업을 보내도록 서버를 시작합니다.
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          volumeMounts:
            - name: pvc-test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql
  volumeClaimTemplates:
    - metadata:
        name: pvc-test
      spec:
        storageClassName: iksoon-nfs-storageclass
        accessModes: ['ReadWriteMany']
        resources:
          requests:
            storage: 1Gi
